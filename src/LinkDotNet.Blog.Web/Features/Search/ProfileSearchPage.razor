@page "/profile-information"
@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure.Persistence
@using LinkDotNet.Blog.Web.Features.AboutMe.Components.ProfileInfo
@using LinkDotNet.Blog.Web.Features.Components
@using LinkDotNet.Blog.Web.Features.Services
@inject NavigationManager NavigationManager
@inject IRepository<PersonalProfile> ProfileRepository

<div class="container">
    <div class="row">
        <h3 class="text-center my-4">Profiles</h3>
        <div class="row justify-content-center">
            <div class="col-12 col-md-3 d-flex my-2">
                <button type="button" class="btn btn-primary w-100" @onclick="OpenAddProfileDialog">
                    <i class="plus"></i> Add Profile
                </button>
            </div>
            <div class="col-12 col-md-6 d-flex">
                <input @bind="searchTerm" @bind:event="oninput" placeholder="Enter first or last name" class="form-control me-2" />
                <button @onclick="Search" class="btn btn-primary" disabled="@IsSearchDisabled"><i class="search"></i> Search</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12">
            @if (searchResults != null)
            {
                <ul class="list-group mt-3">
                    @foreach (var result in searchResults)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span @onclick="() => NavigateToProfile(result.Id)">@result.FullName</span>
                            <div>
                                <button id="edit-profile" type="button" class="btn btn-primary align-items-center gap-2" @onclick="() => OpenEditProfileDialog(result)" aria-label="edit profile">
                                    <i class="pencil"></i>
                                    <div class="vr"></div><span>Edit</span>
                                </button>
                                <button id="delete-profile" type="button" class="btn btn-danger align-items-center gap-2" @onclick="() => ConfirmDeleteProfile(result)" aria-label="delete profile">
                                    <i class="bin2"></i>
                                    <div class="vr"></div><span>Delete</span>
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

<AddProfileDialog @ref="addProfileDialog" ProfileCreated="StoreProfile" />
<ConfirmDialog @ref="confirmDialog" Title="Delete Profile" Content="Do you really want to delete this profile?" OnYesPressed="DeleteProfile" />

@code {
    private string searchTerm = string.Empty;
    private List<PersonalProfile> searchResults;
    private AddProfileDialog addProfileDialog;
    private ConfirmDialog confirmDialog;
    private PersonalProfile? profileToEdit;
    private PersonalProfile? profileToDelete;

    private bool IsSearchDisabled => searchTerm.Length < 3;

    private async Task Search()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            searchResults = (await ProfileRepository.GetAllAsync())
                .Where(p => p.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || p.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void NavigateToProfile(string profileId)
    {
        NavigationManager.NavigateTo($"/AboutMe/{profileId}");
    }

    private void OpenAddProfileDialog()
    {
        profileToEdit = null;
        addProfileDialog.ProfileToEdit = profileToEdit;
        addProfileDialog.Show();
    }

    private void OpenEditProfileDialog(PersonalProfile profile)
    {
        profileToEdit = profile;
        addProfileDialog.ProfileToEdit = profileToEdit;
        addProfileDialog.Show();
    }

    private void ConfirmDeleteProfile(PersonalProfile profile)
    {
        profileToDelete = profile;
        confirmDialog.Open();
    }

    private async Task DeleteProfile()
    {
        if (profileToDelete != null)
        {
            await ProfileRepository.DeleteAsync(profileToDelete.Id);
            searchResults.Remove(profileToDelete);
            profileToDelete = null;
        }
    }

    private async Task StoreProfile(PersonalProfile profile)
    {
        await ProfileRepository.StoreAsync(profile);
        await Search();
    }
}
