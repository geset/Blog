@using LinkDotNet.Blog.Domain
<ModalDialog @ref="Dialog" Title="@((TalkToEdit != null) ? "Edit Profile" : "Add Profile")">
    <EditForm Model="model" OnValidSubmit="CreateOrUpdateTalk">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="talk-title">Presentation title</label>
            <InputText class="form-control" id="talk-title" @bind-Value="model.PresentationTitle" />
        </div>
        <div class="mb-3">
            <label for="talk-place">Presentation place</label>
            <InputText class="form-control" id="talk-place" @bind-Value="model.Place" />
            <small for="talk-place" class="form-text text-body-secondary">The place / event where you hold the presentation / talk.</small>
        </div>
        <div class="mb-3">
            <label for="talk-date">Date</label>
            <InputDate class="form-control" id="talk-date" @bind-Value="model.PublishedDate" />
        </div>
        <div class="mb-3">
            <label for="talk-content">Description</label>
            <MarkdownTextArea id="talk-content" Class="form-control" Rows="10" @bind-Value="@model.Description"></MarkdownTextArea>
        </div>
        <button id="talk-submit" class="btn btn-primary" type="submit">Submit</button>
    </EditForm>
</ModalDialog>

@code {
    [Parameter]
    public EventCallback<Talk> TalkCreated { get; set; }

    [Parameter]
    public string ProfileId { get; set; } = string.Empty;

    [Parameter]
    public Talk? TalkToEdit { get; set; }

    private ModalDialog Dialog { get; set; } = default!;

    private AddTalkEntryModel model = new();

    public void Open()
    {
        if (TalkToEdit != null)
        {
            model = new AddTalkEntryModel
            {
                PresentationTitle = TalkToEdit.PresentationTitle,
                Place = TalkToEdit.Place,
                Description = TalkToEdit.Description,
                PublishedDate = TalkToEdit.PublishedDate
            };
        }
        else
        {
            model = new AddTalkEntryModel();
        }
        Dialog.Open();
        StateHasChanged();
    }

    private async Task CreateOrUpdateTalk()
    {
        ArgumentNullException.ThrowIfNull(model.PresentationTitle);
        ArgumentNullException.ThrowIfNull(model.Place);
        ArgumentNullException.ThrowIfNull(model.Description);
        ArgumentException.ThrowIfNullOrWhiteSpace(ProfileId);

        Talk talk;
        if (TalkToEdit != null)
        {
            // Update existing talk
            TalkToEdit.Update(model.PresentationTitle, model.Place, model.Description, model.PublishedDate);
            talk = TalkToEdit;
        }
        else
        {
            // Create new talk
            talk = Talk.Create(model.PresentationTitle, model.Place, model.Description, model.PublishedDate, ProfileId);
        }

        await TalkCreated.InvokeAsync(talk);
        model = new AddTalkEntryModel();
        Dialog.Close();
    }
}
